// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZHTplusGraph.proto

#ifndef PROTOBUF_ZHTplusGraph_2eproto__INCLUDED
#define PROTOBUF_ZHTplusGraph_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ZHTplusGraph {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ZHTplusGraph_2eproto();
void protobuf_AssignDesc_ZHTplusGraph_2eproto();
void protobuf_ShutdownFile_ZHTplusGraph_2eproto();

class Node;
class Edge;
class Property;

// ===================================================================

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nodeID = 1;
  inline bool has_nodeid() const;
  inline void clear_nodeid();
  static const int kNodeIDFieldNumber = 1;
  inline const ::std::string& nodeid() const;
  inline void set_nodeid(const ::std::string& value);
  inline void set_nodeid(const char* value);
  inline void set_nodeid(const char* value, size_t size);
  inline ::std::string* mutable_nodeid();
  inline ::std::string* release_nodeid();
  inline void set_allocated_nodeid(::std::string* nodeid);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .ZHTplusGraph.Edge edge_source = 3;
  inline int edge_source_size() const;
  inline void clear_edge_source();
  static const int kEdgeSourceFieldNumber = 3;
  inline const ::ZHTplusGraph::Edge& edge_source(int index) const;
  inline ::ZHTplusGraph::Edge* mutable_edge_source(int index);
  inline ::ZHTplusGraph::Edge* add_edge_source();
  inline const ::google::protobuf::RepeatedPtrField< ::ZHTplusGraph::Edge >&
      edge_source() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZHTplusGraph::Edge >*
      mutable_edge_source();

  // repeated .ZHTplusGraph.Edge edge_target = 4;
  inline int edge_target_size() const;
  inline void clear_edge_target();
  static const int kEdgeTargetFieldNumber = 4;
  inline const ::ZHTplusGraph::Edge& edge_target(int index) const;
  inline ::ZHTplusGraph::Edge* mutable_edge_target(int index);
  inline ::ZHTplusGraph::Edge* add_edge_target();
  inline const ::google::protobuf::RepeatedPtrField< ::ZHTplusGraph::Edge >&
      edge_target() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZHTplusGraph::Edge >*
      mutable_edge_target();

  // repeated .ZHTplusGraph.Property property = 5;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 5;
  inline const ::ZHTplusGraph::Property& property(int index) const;
  inline ::ZHTplusGraph::Property* mutable_property(int index);
  inline ::ZHTplusGraph::Property* add_property();
  inline const ::google::protobuf::RepeatedPtrField< ::ZHTplusGraph::Property >&
      property() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZHTplusGraph::Property >*
      mutable_property();

  // @@protoc_insertion_point(class_scope:ZHTplusGraph.Node)
 private:
  inline void set_has_nodeid();
  inline void clear_has_nodeid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nodeid_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::ZHTplusGraph::Edge > edge_source_;
  ::google::protobuf::RepeatedPtrField< ::ZHTplusGraph::Edge > edge_target_;
  ::google::protobuf::RepeatedPtrField< ::ZHTplusGraph::Property > property_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ZHTplusGraph_2eproto();
  friend void protobuf_AssignDesc_ZHTplusGraph_2eproto();
  friend void protobuf_ShutdownFile_ZHTplusGraph_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class Edge : public ::google::protobuf::Message {
 public:
  Edge();
  virtual ~Edge();

  Edge(const Edge& from);

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Edge& default_instance();

  void Swap(Edge* other);

  // implements Message ----------------------------------------------

  Edge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Edge& from);
  void MergeFrom(const Edge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string edgeID = 1;
  inline bool has_edgeid() const;
  inline void clear_edgeid();
  static const int kEdgeIDFieldNumber = 1;
  inline const ::std::string& edgeid() const;
  inline void set_edgeid(const ::std::string& value);
  inline void set_edgeid(const char* value);
  inline void set_edgeid(const char* value, size_t size);
  inline ::std::string* mutable_edgeid();
  inline ::std::string* release_edgeid();
  inline void set_allocated_edgeid(::std::string* edgeid);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string source = 3;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 3;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // optional string target = 4;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 4;
  inline const ::std::string& target() const;
  inline void set_target(const ::std::string& value);
  inline void set_target(const char* value);
  inline void set_target(const char* value, size_t size);
  inline ::std::string* mutable_target();
  inline ::std::string* release_target();
  inline void set_allocated_target(::std::string* target);

  // optional bool directed = 5;
  inline bool has_directed() const;
  inline void clear_directed();
  static const int kDirectedFieldNumber = 5;
  inline bool directed() const;
  inline void set_directed(bool value);

  // repeated .ZHTplusGraph.Property property = 6;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 6;
  inline const ::ZHTplusGraph::Property& property(int index) const;
  inline ::ZHTplusGraph::Property* mutable_property(int index);
  inline ::ZHTplusGraph::Property* add_property();
  inline const ::google::protobuf::RepeatedPtrField< ::ZHTplusGraph::Property >&
      property() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZHTplusGraph::Property >*
      mutable_property();

  // @@protoc_insertion_point(class_scope:ZHTplusGraph.Edge)
 private:
  inline void set_has_edgeid();
  inline void clear_has_edgeid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_directed();
  inline void clear_has_directed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* edgeid_;
  ::std::string* name_;
  ::std::string* source_;
  ::std::string* target_;
  ::google::protobuf::RepeatedPtrField< ::ZHTplusGraph::Property > property_;
  bool directed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ZHTplusGraph_2eproto();
  friend void protobuf_AssignDesc_ZHTplusGraph_2eproto();
  friend void protobuf_ShutdownFile_ZHTplusGraph_2eproto();

  void InitAsDefaultInstance();
  static Edge* default_instance_;
};
// -------------------------------------------------------------------

class Property : public ::google::protobuf::Message {
 public:
  Property();
  virtual ~Property();

  Property(const Property& from);

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Property& default_instance();

  void Swap(Property* other);

  // implements Message ----------------------------------------------

  Property* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Property& from);
  void MergeFrom(const Property& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string propertyID = 1;
  inline bool has_propertyid() const;
  inline void clear_propertyid();
  static const int kPropertyIDFieldNumber = 1;
  inline const ::std::string& propertyid() const;
  inline void set_propertyid(const ::std::string& value);
  inline void set_propertyid(const char* value);
  inline void set_propertyid(const char* value, size_t size);
  inline ::std::string* mutable_propertyid();
  inline ::std::string* release_propertyid();
  inline void set_allocated_propertyid(::std::string* propertyid);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:ZHTplusGraph.Property)
 private:
  inline void set_has_propertyid();
  inline void clear_has_propertyid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* propertyid_;
  ::std::string* name_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ZHTplusGraph_2eproto();
  friend void protobuf_AssignDesc_ZHTplusGraph_2eproto();
  friend void protobuf_ShutdownFile_ZHTplusGraph_2eproto();

  void InitAsDefaultInstance();
  static Property* default_instance_;
};
// ===================================================================


// ===================================================================

// Node

// optional string nodeID = 1;
inline bool Node::has_nodeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_nodeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_nodeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_nodeid() {
  if (nodeid_ != &::google::protobuf::internal::kEmptyString) {
    nodeid_->clear();
  }
  clear_has_nodeid();
}
inline const ::std::string& Node::nodeid() const {
  return *nodeid_;
}
inline void Node::set_nodeid(const ::std::string& value) {
  set_has_nodeid();
  if (nodeid_ == &::google::protobuf::internal::kEmptyString) {
    nodeid_ = new ::std::string;
  }
  nodeid_->assign(value);
}
inline void Node::set_nodeid(const char* value) {
  set_has_nodeid();
  if (nodeid_ == &::google::protobuf::internal::kEmptyString) {
    nodeid_ = new ::std::string;
  }
  nodeid_->assign(value);
}
inline void Node::set_nodeid(const char* value, size_t size) {
  set_has_nodeid();
  if (nodeid_ == &::google::protobuf::internal::kEmptyString) {
    nodeid_ = new ::std::string;
  }
  nodeid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Node::mutable_nodeid() {
  set_has_nodeid();
  if (nodeid_ == &::google::protobuf::internal::kEmptyString) {
    nodeid_ = new ::std::string;
  }
  return nodeid_;
}
inline ::std::string* Node::release_nodeid() {
  clear_has_nodeid();
  if (nodeid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nodeid_;
    nodeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Node::set_allocated_nodeid(::std::string* nodeid) {
  if (nodeid_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeid_;
  }
  if (nodeid) {
    set_has_nodeid();
    nodeid_ = nodeid;
  } else {
    clear_has_nodeid();
    nodeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 2;
inline bool Node::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Node::name() const {
  return *name_;
}
inline void Node::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Node::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Node::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Node::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Node::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Node::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .ZHTplusGraph.Edge edge_source = 3;
inline int Node::edge_source_size() const {
  return edge_source_.size();
}
inline void Node::clear_edge_source() {
  edge_source_.Clear();
}
inline const ::ZHTplusGraph::Edge& Node::edge_source(int index) const {
  return edge_source_.Get(index);
}
inline ::ZHTplusGraph::Edge* Node::mutable_edge_source(int index) {
  return edge_source_.Mutable(index);
}
inline ::ZHTplusGraph::Edge* Node::add_edge_source() {
  return edge_source_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZHTplusGraph::Edge >&
Node::edge_source() const {
  return edge_source_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZHTplusGraph::Edge >*
Node::mutable_edge_source() {
  return &edge_source_;
}

// repeated .ZHTplusGraph.Edge edge_target = 4;
inline int Node::edge_target_size() const {
  return edge_target_.size();
}
inline void Node::clear_edge_target() {
  edge_target_.Clear();
}
inline const ::ZHTplusGraph::Edge& Node::edge_target(int index) const {
  return edge_target_.Get(index);
}
inline ::ZHTplusGraph::Edge* Node::mutable_edge_target(int index) {
  return edge_target_.Mutable(index);
}
inline ::ZHTplusGraph::Edge* Node::add_edge_target() {
  return edge_target_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZHTplusGraph::Edge >&
Node::edge_target() const {
  return edge_target_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZHTplusGraph::Edge >*
Node::mutable_edge_target() {
  return &edge_target_;
}

// repeated .ZHTplusGraph.Property property = 5;
inline int Node::property_size() const {
  return property_.size();
}
inline void Node::clear_property() {
  property_.Clear();
}
inline const ::ZHTplusGraph::Property& Node::property(int index) const {
  return property_.Get(index);
}
inline ::ZHTplusGraph::Property* Node::mutable_property(int index) {
  return property_.Mutable(index);
}
inline ::ZHTplusGraph::Property* Node::add_property() {
  return property_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZHTplusGraph::Property >&
Node::property() const {
  return property_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZHTplusGraph::Property >*
Node::mutable_property() {
  return &property_;
}

// -------------------------------------------------------------------

// Edge

// optional string edgeID = 1;
inline bool Edge::has_edgeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Edge::set_has_edgeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Edge::clear_has_edgeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Edge::clear_edgeid() {
  if (edgeid_ != &::google::protobuf::internal::kEmptyString) {
    edgeid_->clear();
  }
  clear_has_edgeid();
}
inline const ::std::string& Edge::edgeid() const {
  return *edgeid_;
}
inline void Edge::set_edgeid(const ::std::string& value) {
  set_has_edgeid();
  if (edgeid_ == &::google::protobuf::internal::kEmptyString) {
    edgeid_ = new ::std::string;
  }
  edgeid_->assign(value);
}
inline void Edge::set_edgeid(const char* value) {
  set_has_edgeid();
  if (edgeid_ == &::google::protobuf::internal::kEmptyString) {
    edgeid_ = new ::std::string;
  }
  edgeid_->assign(value);
}
inline void Edge::set_edgeid(const char* value, size_t size) {
  set_has_edgeid();
  if (edgeid_ == &::google::protobuf::internal::kEmptyString) {
    edgeid_ = new ::std::string;
  }
  edgeid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Edge::mutable_edgeid() {
  set_has_edgeid();
  if (edgeid_ == &::google::protobuf::internal::kEmptyString) {
    edgeid_ = new ::std::string;
  }
  return edgeid_;
}
inline ::std::string* Edge::release_edgeid() {
  clear_has_edgeid();
  if (edgeid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = edgeid_;
    edgeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Edge::set_allocated_edgeid(::std::string* edgeid) {
  if (edgeid_ != &::google::protobuf::internal::kEmptyString) {
    delete edgeid_;
  }
  if (edgeid) {
    set_has_edgeid();
    edgeid_ = edgeid;
  } else {
    clear_has_edgeid();
    edgeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 2;
inline bool Edge::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Edge::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Edge::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Edge::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Edge::name() const {
  return *name_;
}
inline void Edge::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Edge::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Edge::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Edge::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Edge::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Edge::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string source = 3;
inline bool Edge::has_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Edge::set_has_source() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Edge::clear_has_source() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Edge::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& Edge::source() const {
  return *source_;
}
inline void Edge::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void Edge::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void Edge::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Edge::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* Edge::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Edge::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string target = 4;
inline bool Edge::has_target() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Edge::set_has_target() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Edge::clear_has_target() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Edge::clear_target() {
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    target_->clear();
  }
  clear_has_target();
}
inline const ::std::string& Edge::target() const {
  return *target_;
}
inline void Edge::set_target(const ::std::string& value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(value);
}
inline void Edge::set_target(const char* value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(value);
}
inline void Edge::set_target(const char* value, size_t size) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Edge::mutable_target() {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  return target_;
}
inline ::std::string* Edge::release_target() {
  clear_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_;
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Edge::set_allocated_target(::std::string* target) {
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (target) {
    set_has_target();
    target_ = target;
  } else {
    clear_has_target();
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool directed = 5;
inline bool Edge::has_directed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Edge::set_has_directed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Edge::clear_has_directed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Edge::clear_directed() {
  directed_ = false;
  clear_has_directed();
}
inline bool Edge::directed() const {
  return directed_;
}
inline void Edge::set_directed(bool value) {
  set_has_directed();
  directed_ = value;
}

// repeated .ZHTplusGraph.Property property = 6;
inline int Edge::property_size() const {
  return property_.size();
}
inline void Edge::clear_property() {
  property_.Clear();
}
inline const ::ZHTplusGraph::Property& Edge::property(int index) const {
  return property_.Get(index);
}
inline ::ZHTplusGraph::Property* Edge::mutable_property(int index) {
  return property_.Mutable(index);
}
inline ::ZHTplusGraph::Property* Edge::add_property() {
  return property_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZHTplusGraph::Property >&
Edge::property() const {
  return property_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZHTplusGraph::Property >*
Edge::mutable_property() {
  return &property_;
}

// -------------------------------------------------------------------

// Property

// optional string propertyID = 1;
inline bool Property::has_propertyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Property::set_has_propertyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Property::clear_has_propertyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Property::clear_propertyid() {
  if (propertyid_ != &::google::protobuf::internal::kEmptyString) {
    propertyid_->clear();
  }
  clear_has_propertyid();
}
inline const ::std::string& Property::propertyid() const {
  return *propertyid_;
}
inline void Property::set_propertyid(const ::std::string& value) {
  set_has_propertyid();
  if (propertyid_ == &::google::protobuf::internal::kEmptyString) {
    propertyid_ = new ::std::string;
  }
  propertyid_->assign(value);
}
inline void Property::set_propertyid(const char* value) {
  set_has_propertyid();
  if (propertyid_ == &::google::protobuf::internal::kEmptyString) {
    propertyid_ = new ::std::string;
  }
  propertyid_->assign(value);
}
inline void Property::set_propertyid(const char* value, size_t size) {
  set_has_propertyid();
  if (propertyid_ == &::google::protobuf::internal::kEmptyString) {
    propertyid_ = new ::std::string;
  }
  propertyid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Property::mutable_propertyid() {
  set_has_propertyid();
  if (propertyid_ == &::google::protobuf::internal::kEmptyString) {
    propertyid_ = new ::std::string;
  }
  return propertyid_;
}
inline ::std::string* Property::release_propertyid() {
  clear_has_propertyid();
  if (propertyid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = propertyid_;
    propertyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Property::set_allocated_propertyid(::std::string* propertyid) {
  if (propertyid_ != &::google::protobuf::internal::kEmptyString) {
    delete propertyid_;
  }
  if (propertyid) {
    set_has_propertyid();
    propertyid_ = propertyid;
  } else {
    clear_has_propertyid();
    propertyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 2;
inline bool Property::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Property::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Property::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Property::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Property::name() const {
  return *name_;
}
inline void Property::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Property::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Property::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Property::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Property::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Property::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string value = 3;
inline bool Property::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Property::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Property::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Property::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Property::value() const {
  return *value_;
}
inline void Property::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Property::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Property::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Property::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Property::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Property::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ZHTplusGraph

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ZHTplusGraph_2eproto__INCLUDED
